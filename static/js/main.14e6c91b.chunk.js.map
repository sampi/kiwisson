{"version":3,"sources":["constants.js","InputContext.js","screen/Screen.js","keyboard/Key.js","keyboard/Keyboard.js","serviceWorker.js","index.js","App.js"],"names":["__webpack_require__","d","__webpack_exports__","keys","label","subtitle","special","React","createContext","screen_Screen","_React$useContext","useContext","InputContext","input","Object","slicedToArray","_React$useState","useState","_React$useState2","output","setOutput","useEffect","e","then","bind","_ref","numsToText","catch","console","error","react_default","a","createElement","className","keyboard_Key","_ref$label","_ref$subtitle","_ref$special","_React$useContext2","setInput","data-cy","onClick","arguments","length","undefined","window","navigator","vibrate","replace","handleClick","keyboard_Keyboard","map","key","idx","assign","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","ReactDOM","render","Provider","value","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.14e6c91b.chunk.js","sourcesContent":["/**\n * Labels, subtitles and special functions\n * of the phone keyboard.\n *\n * @type {Array<{label: String, subtitle: =String, special: =String}>}\n */\nexport const keys = [\n\t{ label: '1', subtitle: '-' },\n\t{ label: '2', subtitle: 'abc' },\n\t{ label: '3', subtitle: 'def' },\n\t{ label: '4', subtitle: 'ghi' },\n\t{ label: '5', subtitle: 'jkl' },\n\t{ label: '6', subtitle: 'mno' },\n\t{ label: '7', subtitle: 'pqrs' },\n\t{ label: '8', subtitle: 'tuv' },\n\t{ label: '9', subtitle: 'wxyz' },\n\t{ label: '*', special: 'alt' },\n\t{ label: '0' },\n\t{ label: '<', special: 'delete' }\n];\n","import React from 'react';\n\n/**\n * InputContext\n * The current raw input of numbers and *'s\n * is stored and modified in this Context.\n */\nexport default React.createContext(['', () => {}]);\n","import React from 'react';\nimport InputContext from '../InputContext';\nimport './Screen.css';\n\n/**\n * Screen Component\n *\n * This Component consumes the InputContext using Hooks.\n * The backend would be hooked up here.\n */\nexport default function() {\n\tconst [input] = React.useContext(InputContext);\n\tconst [output, setOutput] = React.useState('');\n\n\tReact.useEffect(() => {\n\t\t// Split the \"server\" into a separate chunk\n\t\timport(/* webpackChunkName: \"server\" */ '../server/server')\n\t\t\t.then(({ numsToText }) => setOutput(numsToText(input)))\n\t\t\t.catch(e => console.error(e));\n\t}, [input]);\n\treturn (\n\t\t<section className=\"screen\">\n\t\t\t<figure>{output}</figure>\n\t\t</section>\n\t);\n}\n","import React from 'react';\nimport InputContext from '../InputContext';\nimport './Key.css';\n\n/**\n * Handle tap/click on Key\n * If the DELETE key is pressed:\n *   remove all trailing *'s and the last number\n * @param  {String}   input    Current input in the React Context\n * @param  {Function} setInput React Context Hook setter\n * @param  {String}   label    Label of the button pressed\n * @param  {=String}  special  Special function of the button pressed\n */\nexport function handleClick(\n\tinput = '',\n\tsetInput = () => {},\n\tlabel = '',\n\tspecial = ''\n) {\n\ttry {\n\t\twindow.navigator.vibrate(5);\n\t} catch (e) {}\n\n\tsetInput(\n\t\tspecial === 'delete' ? input.replace(/([0-9]?[*]*$)/, '') : input + label\n\t);\n}\n\n/**\n * Key Component\n * @param  {String}  props.label    Label of the Key\n * @param  {=String} props.subtitle Subtitle of the Key\n * @param  {=String} props.special  Special function of the key\n */\nexport default function({ label = '', subtitle = '', special = '' }) {\n\tconst [input, setInput] = React.useContext(InputContext);\n\treturn (\n\t\t<button\n\t\t\tclassName=\"key\"\n\t\t\tdata-cy={special || label}\n\t\t\tonClick={() => handleClick(input, setInput, label, special)}\n\t\t>\n\t\t\t<figure>\n\t\t\t\t<p>{label}</p>\n\t\t\t\t{subtitle && <figcaption>{subtitle}</figcaption>}\n\t\t\t</figure>\n\t\t</button>\n\t);\n}\n","import React from 'react';\nimport Key from './Key';\nimport './Keyboard.css';\nimport { keys } from '../constants';\n\n/**\n * Keyboard Component\n *\n * (It's just a bunch of Keys.)\n */\nexport default () => (\n\t<article className=\"keyboard\">\n\t\t{keys.map((key, idx) => (\n\t\t\t<Key key={idx} {...key} />\n\t\t))}\n\t</article>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit http://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n","import React from 'react';\nimport Screen from './screen/Screen';\nimport Keyboard from './keyboard/Keyboard';\nimport InputContext from './InputContext';\nimport './App.css';\n\n/**\n * App Component\n * Context is set up here.\n */\nexport default function() {\n\tconst [input, setInput] = React.useState('');\n\n\treturn (\n\t\t<InputContext.Provider value={[input, setInput]}>\n\t\t\t<main>\n\t\t\t\t<header>KIWISSON</header>\n\t\t\t\t<Screen />\n\t\t\t\t<Keyboard />\n\t\t\t</main>\n\t\t</InputContext.Provider>\n\t);\n}\n"],"sourceRoot":""}