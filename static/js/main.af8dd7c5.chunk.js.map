{"version":3,"sources":["InputContext.js","constants.js","screen/server.js","screen/Screen.js","keyboard/Key.js","keyboard/Keyboard.js","serviceWorker.js","index.js","App.js"],"names":["React","createContext","keys","label","subtitle","special","words","fetch","then","res","text","split","server","input","map","inWord","rawInput","join","re","RegExp","concat","num","output","filter","w","length","test","processWord","screen_Screen","_React$useContext","useContext","InputContext","Object","slicedToArray","_React$useState","useState","_React$useState2","setOutput","useEffect","getWords","react_default","a","createElement","className","keyboard_Key","_ref","_React$useContext2","setInput","onClick","window","navigator","vibrate","Symbol","replace","keyboard_Keyboard","key","idx","assign","Boolean","location","hostname","match","ReactDOM","render","Provider","value","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.af8dd7c5.chunk.js","sourcesContent":["import React from 'react';\n\nexport default React.createContext(['', () => {}]);\n","export const keys = [\n\t{ label: '1', subtitle: '-' },\n\t{ label: '2', subtitle: 'abc' },\n\t{ label: '3', subtitle: 'def' },\n\t{ label: '4', subtitle: 'ghi' },\n\t{ label: '5', subtitle: 'jkl' },\n\t{ label: '6', subtitle: 'mno' },\n\t{ label: '7', subtitle: 'pqrs' },\n\t{ label: '8', subtitle: 'tuv' },\n\t{ label: '9', subtitle: 'wxyz' },\n\t{ label: '*' },\n\t{ label: '0' },\n\t{ label: '<', special: 'delete' }\n];\n","import { keys } from '../constants';\n\nlet words = [];\nfetch('words.txt')\n\t.then(res => res.text())\n\t.then(text => (words = text.split('\\n')));\n\nfunction processWord(rawInput) {\n\tconst input = rawInput.split('*').join('');\n\n\tconst re = new RegExp(\n\t\t`^${input\n\t\t\t.split('')\n\t\t\t.map(num => num >= 2 && num <= 9 && `[${keys[num - 1].subtitle}]`)\n\t\t\t.join('')}$`,\n\t\t'i'\n\t);\n\n\tconst output = words\n\t\t.filter(w => w.length === input.length)\n\t\t.filter(w => re.test(w));\n\n\tif (!output.length) {\n\t\treturn input;\n\t}\n\n\treturn output[(rawInput.split('*').length - 1) % output.length];\n}\n\nexport default function(input) {\n\treturn input\n\t\t.split('0')\n\t\t.map(inWord => processWord(inWord))\n\t\t.join(' ');\n}\n","import React from 'react';\nimport InputContext from '../InputContext';\nimport getWords from './server';\nimport './Screen.css';\n\nexport default function() {\n\tconst [input] = React.useContext(InputContext);\n\tconst [output, setOutput] = React.useState('');\n\n\tReact.useEffect(() => {\n\t\tconst words = getWords(input);\n\t\tsetOutput(words);\n\t}, [input]);\n\treturn (\n\t\t<section className=\"screen\">\n\t\t\t<figure>{output}</figure>\n\t\t</section>\n\t);\n}\n","import React from 'react';\nimport InputContext from '../InputContext';\nimport './Key.css';\n\nexport default function({ label, subtitle, special }) {\n\tconst [input, setInput] = React.useContext(InputContext);\n\treturn (\n\t\t<button\n\t\t\tclassName=\"key\"\n\t\t\tonClick={() => {\n\t\t\t\twindow.navigator.vibrate(5);\n\t\t\t\tsetInput(\n\t\t\t\t\tspecial === 'delete'\n\t\t\t\t\t\t? /([0-9]?[*]*$)/[Symbol.replace](input, '')\n\t\t\t\t\t\t: input + label\n\t\t\t\t);\n\t\t\t}}\n\t\t>\n\t\t\t<figure>\n\t\t\t\t<p>{label}</p>\n\t\t\t\t{subtitle && <figcaption>{subtitle}</figcaption>}\n\t\t\t</figure>\n\t\t</button>\n\t);\n}\n","import React from 'react';\nimport Key from './Key';\nimport './Keyboard.css';\nimport { keys } from '../constants';\n\nexport default () => (\n\t<article className=\"keyboard\">\n\t\t{keys.map((key, idx) => (\n\t\t\t<Key key={idx} {...key} />\n\t\t))}\n\t</article>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit http://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport Screen from './screen/Screen';\nimport Keyboard from './keyboard/Keyboard';\nimport InputContext from './InputContext';\nimport './App.css';\n\nexport default function() {\n\tconst [input, setInput] = React.useState('');\n\n\treturn (\n\t\t<InputContext.Provider value={[input, setInput]}>\n\t\t\t<main>\n\t\t\t\t<Screen />\n\t\t\t\t<Keyboard />\n\t\t\t</main>\n\t\t</InputContext.Provider>\n\t);\n}\n"],"sourceRoot":""}